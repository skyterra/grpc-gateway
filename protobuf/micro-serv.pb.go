// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: micro-serv.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 微服务请求
type ServRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label  string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`   // 校验服务标签
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"` // json格式数据，微服务读取数据并处理
}

func (x *ServRequest) Reset() {
	*x = ServRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_serv_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServRequest) ProtoMessage() {}

func (x *ServRequest) ProtoReflect() protoreflect.Message {
	mi := &file_micro_serv_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServRequest.ProtoReflect.Descriptor instead.
func (*ServRequest) Descriptor() ([]byte, []int) {
	return file_micro_serv_proto_rawDescGZIP(), []int{0}
}

func (x *ServRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ServRequest) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// 微服务响应结果
type ServReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Response string `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"` // 微服务返回处理结果
}

func (x *ServReply) Reset() {
	*x = ServReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_micro_serv_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServReply) ProtoMessage() {}

func (x *ServReply) ProtoReflect() protoreflect.Message {
	mi := &file_micro_serv_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServReply.ProtoReflect.Descriptor instead.
func (*ServReply) Descriptor() ([]byte, []int) {
	return file_micro_serv_proto_rawDescGZIP(), []int{1}
}

func (x *ServReply) GetResponse() string {
	if x != nil {
		return x.Response
	}
	return ""
}

var File_micro_serv_proto protoreflect.FileDescriptor

var file_micro_serv_proto_rawDesc = []byte{
	0x0a, 0x10, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x3b, 0x0a, 0x0b,
	0x53, 0x65, 0x72, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x27, 0x0a, 0x09, 0x53, 0x65, 0x72,
	0x76, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x32, 0x42, 0x0a, 0x09, 0x4d, 0x69, 0x63, 0x72, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x12,
	0x35, 0x0a, 0x05, 0x44, 0x6f, 0x4a, 0x6f, 0x62, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x42, 0x0c, 0x5a, 0x0a, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_micro_serv_proto_rawDescOnce sync.Once
	file_micro_serv_proto_rawDescData = file_micro_serv_proto_rawDesc
)

func file_micro_serv_proto_rawDescGZIP() []byte {
	file_micro_serv_proto_rawDescOnce.Do(func() {
		file_micro_serv_proto_rawDescData = protoimpl.X.CompressGZIP(file_micro_serv_proto_rawDescData)
	})
	return file_micro_serv_proto_rawDescData
}

var file_micro_serv_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_micro_serv_proto_goTypes = []interface{}{
	(*ServRequest)(nil), // 0: protobuf.ServRequest
	(*ServReply)(nil),   // 1: protobuf.ServReply
}
var file_micro_serv_proto_depIdxs = []int32{
	0, // 0: protobuf.MicroServ.DoJob:input_type -> protobuf.ServRequest
	1, // 1: protobuf.MicroServ.DoJob:output_type -> protobuf.ServReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_micro_serv_proto_init() }
func file_micro_serv_proto_init() {
	if File_micro_serv_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_micro_serv_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_micro_serv_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_micro_serv_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_micro_serv_proto_goTypes,
		DependencyIndexes: file_micro_serv_proto_depIdxs,
		MessageInfos:      file_micro_serv_proto_msgTypes,
	}.Build()
	File_micro_serv_proto = out.File
	file_micro_serv_proto_rawDesc = nil
	file_micro_serv_proto_goTypes = nil
	file_micro_serv_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MicroServClient is the client API for MicroServ service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MicroServClient interface {
	DoJob(ctx context.Context, in *ServRequest, opts ...grpc.CallOption) (*ServReply, error)
}

type microServClient struct {
	cc grpc.ClientConnInterface
}

func NewMicroServClient(cc grpc.ClientConnInterface) MicroServClient {
	return &microServClient{cc}
}

func (c *microServClient) DoJob(ctx context.Context, in *ServRequest, opts ...grpc.CallOption) (*ServReply, error) {
	out := new(ServReply)
	err := c.cc.Invoke(ctx, "/protobuf.MicroServ/DoJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MicroServServer is the server API for MicroServ service.
type MicroServServer interface {
	DoJob(context.Context, *ServRequest) (*ServReply, error)
}

// UnimplementedMicroServServer can be embedded to have forward compatible implementations.
type UnimplementedMicroServServer struct {
}

func (*UnimplementedMicroServServer) DoJob(context.Context, *ServRequest) (*ServReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoJob not implemented")
}

func RegisterMicroServServer(s *grpc.Server, srv MicroServServer) {
	s.RegisterService(&_MicroServ_serviceDesc, srv)
}

func _MicroServ_DoJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MicroServServer).DoJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.MicroServ/DoJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MicroServServer).DoJob(ctx, req.(*ServRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MicroServ_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.MicroServ",
	HandlerType: (*MicroServServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DoJob",
			Handler:    _MicroServ_DoJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "micro-serv.proto",
}
